[BUNDLE]
io_insn = i 32  insn,
            i 1   insn_vld,
            o 32  pc_r_addr,
            o 1   pc_r_vld
pipe_rf = i 1   rf_r_vld,
          i 32  rf_rdata,
          o 32  rf_raddr,
          o 1   rf_w_vld,
          o 32  rf_wdata,
          o 32  rf_waddr
io_mem = i 1   mem_data_vld,
           i 32  mem_data,
           o 32  mem_data,
           o 32  mem_addr,
           o 1   mem_w_vld
ctrl_signal = i 32  insn,
              i 32  pc 


[PIN]
io_insn = bundle(io_insn)
io_mem = bundle(io_mem)

#self.stages = ["FE", "DC", "EX", "MM", "WB"]
#insn = logic.Bundle('i_data',)
#self.signals = [insn]
#
[TEMP_TYPE]
temp_type = PIPELINE

[PIPELINE]
name = pa
stage = FE, DC, EX, MM, WB
port = pipe_insn, pipe_reg, pipe_mem
pipesig = ctrl_signal

[PIN]
top   = pipe_insn
left  = pipe_mem
right = pipe_reg
down  = 

#[SIGNAL]
#i_insn_vld = 1
#i_insn = 32 
#i_reg_r_vld = 1
#i_reg_rdata = 32
#o_reg_raddr = 32
#i_reg_w_vld = 1
#o_reg_wdata = 32
#o_reg_waddr = 32
#i_mem_data_vld = 1
#i_mem_data = 32 
#o_mem_data = 32
#o_mem_addr = 32
#insn = 32
#pc = 32


#i_data = Signal(32)
#o_data = Signal(32)
#o_addr = Signal(32)
#
#import logic
#driver = logic.Bundle(i_data)
#loader = logic.Bundle(o_data, o_addr)
#
#import component
#stage = component.Pipeline.Stage("FE, DC, EX, MM, WB")
#
#pipe = component.Pipeline('pa', stage, driver, loader)

#my_pipe = component.StraightPipeline('pa')
#my_pipe.set_stage('FE, DC, EX, MM, WB')
#my_pipe.add_port(logic.Bundle(k))
